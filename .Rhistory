library(readr)
data_ovni <- read_delim("data_importantes/data_ovni.csv",
delim = ";", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
View(data_ovni)
backup_data <- data_ovni
library(tidyverse)
library(skimr)
library(rstatix)
library(questionr)
library(readr)
library(tidyverse)
data_tibble <- as.tibble(data_ovni)
data_tibble
dataframe2iramuteq <- function(data, filename) {
data %>%
rename_with(~str_replace_all(str_to_lower(.), "[\\W_]+", "")) %>% # clean column names
drop_na() %>%
mutate(across(1:ncol(.)-1, ~str_replace_all(., "[\\W_]+", "")), row = 1:n()) %>% # clean values
pivot_longer(-row, names_to = "coln", values_to = "value") %>%
group_by(row) %>%
summarise(text = str_c("**** ", str_c("*", coln[-n()], "_", value[-n()], collapse = " "), "\n", last(value))) %>%
summarise(text = str_c(text, collapse = "\n")) %>%
pull(1) %>%
write_file(filename)
}
data_iramuteq <- data_ovni
mots_a_supprimer <- c("journaliste", "journalistes", "ovni", "ovnis", "extraterrestre", "extraterrestres", "source", "imedia", "sources", "actualité", "actualités", "france", "chroniqueur", "chroniqueurs", "chronique", "entretien", "emission", "som", "sommaire", "programme", "emissions", "auteur", "auteurs","catherine", "pauline", "jean", "michel", "bill", "sacha", "paul", "emily", "nathan", "chloe", "christopher", "erika", "sofia", "sophia", "mokrani", "nadia", "daam", "patrick", "marc", "mouloud", "interview", "interviews", "roger", "lestrade", "alien", "aliens", "tele", "tv", "television", "televisions", "teles", "chaine", "chaines", "tf1", "M6", "publicité", "publicités", "direct", "directs", "maire", "maires", "nathalie", "presse", "press", "presses", "directeur", "directeurs", "européen", "europe", "européens", "renaud", "declaration", "declarations", "macron", "quantar", "melanchon", "francais", "français", "camille", "tendance", "tendances", "mode", "clique", "cliques", "recommandation", "recommandations", "prescritpions", "prescription")
# Appliquer gsub()
data_iramuteq$resume <- gsub(paste(mots_a_supprimer, collapse="|"), "", data_iramuteq$resume, ignore.case = TRUE)
dataframe2iramuteq(data_iramuteq, "datairamuteq.txt")
dataframe2iramuteq(data_iramuteq, "data_iramuteq_media.txt")
data_ovni %>%
skim()
data_tibble %>%
skim()
data_tibble %>%
summary()
data_tibble
data_tibble$notice <- as.character (data_tibble$notice)
data_tibble$`Année de date_diffusion` <- as.character (data_tibble$`Année de date_diffusion`)
data_tibble$`Année de decennie` <- as.character (data_tibble$`Année de decennie`)
data_tibble$chaine <- as.factor(data_tibble$chaine)
data_tibble$public_groupe <- as.factor(data_tibble$public_groupe)
data_tibble$mediamat_groupe <- as.factor(data_tibble$mediamat_groupe)
data_tibble$genre_groupe <- as.factor(data_tibble$genre_groupe)
notice_plus_ancienne <- min(data_tibble$`Année de date_diffusion`)
# Extraire la chaîne associée à cette notice
chaine_plus_ancienne <- subset(data_tibble, "Année de date_diffusion" == notice_plus_ancienne)$chaine
# Afficher le résultat
print(chaine_plus_ancienne)
# Trier les données par ordre croissant de la colonne "Année de date_diffusion"
data_tri <- data_tibble[order(data_tibble$`Année de date_diffusion`), ]
# Sélectionner la première ligne (la plus ancienne)
premiere_notice <- data_tri[1, ]
# Extraire la chaîne associée à cette notice
chaine_plus_ancienne <- premiere_notice$chaine
# Afficher le résultat
print(chaine_plus_ancienne)
View(data_tri)
# Compter le nombre de notices par chaîne
notices_par_chaine <- data_tibble %>%
group_by(chaine) %>%
summarise(nombre_notices = n())
View(notices_par_chaine)
# Classer les chaînes en fonction du nombre de notices (du plus grand au plus petit)
chaine_plus_frequente <- notices_par_chaine %>%
arrange(desc(nombre_notices))
View(chaine_plus_frequente)
# Afficher le résultat
print(chaine_plus_frequente)
chaines_plus_frequentes <- chaine_plus_frequente$chaine[1:5]  # Sélectionnez les 5 chaînes ayant le plus grand nombre de notices (vous pouvez ajuster ce nombre si nécessaire)
# Filtrer les données pour inclure uniquement les notices associées à ces chaînes
donnees_chaines_plus_frequentes <- subset(data_tibble, chaine %in% chaines_plus_frequentes)
View(donnees_chaines_plus_frequentes)
# Répartition des mediamat_group pour les chaînes sélectionnées
repartition_mediamat <- table(donnees_chaines_plus_frequentes$mediamat_group)
# Répartition des mediamat_group pour les chaînes sélectionnées
repartition_mediamat <- table(donnees_chaines_plus_frequentes$mediamat_groupe)
# Répartition des genre_group pour les chaînes sélectionnées
repartition_genre <- table(donnees_chaines_plus_frequentes$genre_groupe)
# Afficher les résultats
print("Répartition des mediamat_group :")
print(repartition_mediamat)
print(repartition_genre)
# Calculer le nombre total de notices par chaîne
total_notices_par_chaine <- aggregate(notice ~ chaine, data = donnees, FUN = length)
# 1. Calculer le nombre de notices par décennie
nombre_notices_par_decennie <- data_tibble %>%
group_by(`Année de decennie`) %>%
summarise(nombre_notices = n())
View(nombre_notices_par_decennie)
library(ggplot2)
# 2. Créer un graphique à barres pour visualiser l'évolution du nombre de notices au fil des décennies
ggplot(nombre_notices_par_decennie, aes(x = "Année de decennie", y = nombre_notices)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Évolution du nombre de notices par décennie",
x = "Décennie",
y = "Nombre de notices") +
theme_minimal()
# 2. Créer un graphique à barres pour visualiser l'évolution du nombre de notices au fil des décennies
ggplot(nombre_notices_par_decennie,
aes(x = "Année de decennie",
y = nombre_notices)) +
geom_bar(stat = "identity") +
labs(title = "Évolution du nombre de notices par décennie",
x = "Décennie",
y = "Nombre de notices") +
theme_minimal()
# 2. Créer un graphique à barres pour visualiser l'évolution du nombre de notices au fil des décennies
ggplot(nombre_notices_par_decennie,
aes(x = "Année de decennie",
y = nombre_notices)) +
geom_bar(stat = "identity")
# 2. Créer un graphique à barres pour visualiser l'évolution du nombre de notices au fil des décennies
ggplot(nombre_notices_par_decennie,
aes(x = "Année de decennie",
y = nombre_notices)) +
geom_bar()
# 3. Calculer le taux de variation pertinent entre chaque décennie
taux_variation <- nombre_notices_par_decennie %>%
mutate(taux_variation = (nombre_notices - lag(nombre_notices)) / lag(nombre_notices) * 100)
# Afficher le taux de variation
print(taux_variation)
# 1. Calculer l'audience moyenne pour chaque mediamat_groupe
audience_moyenne_par_groupe <- data_tibble %>%
group_by(mediamat_group) %>%
summarise(audience_moyenne = mean(audience, na.rm = TRUE))
# 1. Calculer l'audience moyenne pour chaque mediamat_groupe
audience_moyenne_par_groupe <- data_tibble %>%
group_by(mediamat_groupe) %>%
summarise(audience_moyenne = mean(audience, na.rm = TRUE))
View(audience_moyenne_par_groupe)
notices_meilleures_audiences <- data_tibble %>%
group_by(mediamat_groupe) %>%
filter(audience == max(audience, na.rm = TRUE))
View(notices_meilleures_audiences)
print(audience_moyenne_par_groupe)
print(notices_meilleures_audiences)
notices_meilleures_audiences <- data_tibble %>%
group_by(mediamat_groupe) %>%
filter(audience == max(audience, na.rm = TRUE)) %>%
arrange(desc(audience))  # Tri par ordre décroissant d'audience
print(audience_moyenne_par_groupe)
print(notices_meilleures_audiences)
View(notices_meilleures_audiences)
# Identifier les notices avec les meilleures parts de marché
notices_meilleures_parts_de_marche <- data_tibble %>%
filter(part_de_marche == max(part_de_marche, na.rm = TRUE))
# Afficher les notices avec les meilleures parts de marché
print(notices_meilleures_parts_de_marche)
View(notices_meilleures_parts_de_marche)
# Identifier les notices avec les meilleures parts de marché
notices_meilleures_parts_de_marche <- data_tibble %>%
arrange(desc(part_de_marche)) %>%  # Trier par ordre décroissant de part_de_marche
# Afficher les notices avec les meilleures parts de marché
print(notices_meilleures_parts_de_marche)
# Identifier les notices avec les meilleures parts de marché
notices_meilleures_parts_de_marche <- data_tibble %>%
arrange(desc(part_de_marche))  # Trier par ordre décroissant de part_de_marche
View(notices_meilleures_parts_de_marche)
# Calculer le nombre total d'audience homme et d'audience femme parmi ces notices
audience_homme <- sum(notices_meilleures_parts_de_marche$audience_homme, na.rm = TRUE)
audience_femme <- sum(notices_meilleures_parts_de_marche$audience_femme, na.rm = TRUE)
# Comparer le nombre d'audience homme et d'audience femme
if (audience_homme > audience_femme) {
cat("Il y a plus d'audience homme parmi les meilleures notices avec les meilleures parts de marché.")
} else if (audience_femme > audience_homme) {
cat("Il y a plus d'audience femme parmi les meilleures notices avec les meilleures parts de marché.")
} else {
cat("Il y a autant d'audience homme que d'audience femme parmi les meilleures notices avec les meilleures parts de marché.")
}
# Nombre total de notices
nombre_total_notices <- nrow(notices_meilleures_parts_de_marche)
# Proportion d'audience homme et d'audience femme
proportion_audience_homme <- total_audience_homme / nombre_total_notices
total_audience_homme <- sum(notices_meilleures_parts_de_marche$audience_homme, na.rm = TRUE)
total_audience_femme <- sum(notices_meilleures_parts_de_marche$audience_femme, na.rm = TRUE)
# Proportion d'audience homme et d'audience femme
proportion_audience_homme <- total_audience_homme / nombre_total_notices
proportion_audience_femme <- total_audience_femme / nombre_total_notices
# Effectuer le test de proportion z
z_test <- prop.test(c(total_audience_homme, total_audience_femme), n = c(nombre_total_notices, nombre_total_notices))
z_test <- prop.test(x = c(total_audience_homme, total_audience_femme),
n = c(nombre_total_notices, nombre_total_notices),
correct = FALSE)
# Calculer la table de contingence pour les audiences homme et femme
contingency_table <- matrix(c(total_audience_homme, total_audience_femme,
nombre_total_notices - total_audience_homme, nombre_total_notices - total_audience_femme),
ncol = 2,
dimnames = list(c("Homme", "Femme"), c("Audience", "Non-audience")))
# Effectuer le test du chi-deux
chi2_test <- chisq.test(contingency_table)
# Supprimer les valeurs manquantes dans la table de contingence
contingency_table <- contingency_table[complete.cases(contingency_table), ]
# Vérifier que toutes les valeurs sont positives ou nulles
if(all(contingency_table >= 0)) {
# Effectuer le test du chi-deux
chi2_test <- chisq.test(contingency_table)
# Afficher les résultats du test
print(chi2_test)
} else {
print("Toutes les valeurs de la table de contingence doivent être positives ou nulles.")
}
# Afficher les résultats du test
print(chi2_test)
# Effectuer le test du chi-deux
chi2_test <- chisq.test(contingency_table)
# Supprimer les valeurs manquantes dans la table de contingence
contingency_table <- contingency_table[complete.cases(contingency_table), ]
# Vérifier que toutes les valeurs sont positives ou nulles
if(all(contingency_table >= 0)) {
# Effectuer le test du chi-deux
chi2_test <- chisq.test(contingency_table)
# Afficher les résultats du test
print(chi2_test)
} else {
print("Toutes les valeurs de la table de contingence doivent être positives ou nulles.")
}
